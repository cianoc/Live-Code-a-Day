;;;; Much of the content in this file is taken from various Extempore
;;;; blog posts by Ben Swift which are indexed here:
;;;;   http://benswift.me/extempore-docs/index.html
;;;;

;;; Load the needed libraries -- this will take several minutes
;;;
(sys:set-default-timeout (* 2 13953200))

(sys:load "libs/core/instruments.xtm")
(sys:load "libs/core/pc_ivl.xtm")

;;; Set up the constants we're going to need
;;;





;;; Add the samplers/instruments we're going to need to the dsp output
;;; callback
;;;
(define-instrument subbass subbass_note_c subbass_fx)
(define-instrument sawbass sawbass_note_c sawbass_fx)
(define-instrument shimmer shimmer_pad_note_c shimmer_pad_fx)
(define-instrument fmsynth fmsynth_note_c fmsynth_fx)


(bind-func jasons_rms
    (let ((d:SAMPLE* (alloc FRAMES))
          (t 0)
          (db:SAMPLE 0.0))
      (lambda (x:SAMPLE)
        (pset! d (% t FRAMES) (* x x))
        (set! t (+ t 1))
        (if (= 0 (% t FRAMES))
            (set! db (+ 3.0 (amp2db (sqrt (mean d FRAMES))))))
        x)))

(bind-func dsp:DSP
  (let ((rms (rms_st_c)) ;; stereo rms
        (left:SAMPLE 0.0)
        (right:SAMPLE 0.0))
    (lambda (in time chan dat)
      ;; for convenience set left and right
      ;; once every 'FRAMES'
      (if (= 0 (% time FRAMES))
          (begin (set! left (rms.left))
                 (set! right (rms.right))))
      ;; rms passes signal straight through
      (rms chan
           (+ 
            (fmsynth in time chan dat) 
            (shimmer in time chan dat) 
            (sawbass in time chan dat) 
            (subbass in time chan dat))))))


;(bind-func dsp:DSP
;  (lambda (in time chan dat)
;    (cond ((< chan 2.0)
;           (+ (drums in time chan dat)
;           (edrums in time chan dat) 
;            (conga in time chan dat)
;            (djembe in time chan dat)
;            (perc in time chan dat)
;            (strings in time chan dat)
;             (piano in time chan dat)
;              (subbass in time chan dat)
;              (fmsynth in time chan dat)))
;          (else 0.0))))

(dsp:set! dsp)