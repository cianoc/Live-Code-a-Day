;
(bind-val SPI SAMPLE 3.1415926535897932384626433832795028841971693993751058209749)
(bind-val STWOPI SAMPLE 6.2831853071795864769252867665590057683943387987502116419498)
(bind-val SE SAMPLE 2.7182818284590452353602874713526624977572470936999595749669)

(bind-val SR SAMPLE (integer->real *au:samplerate*))
(bind-val CHANNELS i64 *au:channels*)
(bind-val IN_CHANNELS i64 *au:in-channels*)
(bind-val FRAMES i64 *au:block-size*)

(bind-func osc_c
  (lambda (phase)
    (lambda (amp freq)
      (let ((inc (* STWOPI (/ freq SR))))
        (set! phase (+ phase inc))
        (if (> phase SPI) (set! phase (- phase STWOPI)))
        (* amp (sin phase))))))


(bind-val amp_array |30,SAMPLE|*)

(bind-func dsp:DSP
  (let ((osc_array:|30,[SAMPLE,SAMPLE,SAMPLE]*|* (alloc))
        (freq_array:|30,SAMPLE|* (alloc))
        (i 0))
    ; initialise the arrays
    (dotimes (i 30)
      (aset! osc_array i (osc_c 0.0))
      (aset! amp_array i (* 0.2 (+ 0.5 (* 0.5 (cos (* (i64tof i) (/ (i64tof (now)) 2000000.0)))))))
      (aset! freq_array i (* 50.0 (i64tof i))))
    ; this is the dsp closure
    (lambda (in time chan data)
      (cond ((= chan 0) ; left channel
             (let ((suml 0.0))
               (dotimes (i 15) ; sum over the first 15 oscs
                 (set! suml (+ suml ((aref osc_array i)
                                     (aref amp_array i)
                                     (aref freq_array i)))))
               (/ suml 15.0))) ; normalise over all oscs
            ((= chan 1) ; left channel
             (let ((sumr 0.0))
               (dotimes (i 15 15) ; sum over the first 15 oscs
                 (set! sumr (+ sumr ((aref osc_array i)
                                     (aref amp_array i)
                                     (aref freq_array i)))))
               (/ sumr 15.0)))
            (else 0.0))))) ; any remaining channels

(dsp:set! dsp)

(bind-val green double 0.0)
(set! green 0.5)

(bind-val beat_array |8,double|*)
;;; Code:
(define glctx (gl:make-ctx ":0.0" #f 0.0 0.0 400.0 400.0))

;; my circle function
(bind-func circle
	(lambda (radius res)
		(glBegin GL_TRIANGLE_FAN)
		(let ((i:double 0.0))
			(dotimes (i res)
				(let ((radians (* (/ i res) 6.283)))
					(glVertex2d (* (sin radians) radius) 
            (* (cos radians) radius))))
		(glEnd))))

;; a trivial opengl draw loop
(bind-func my-gl-loop
    (lambda ()
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (glLoadIdentity)
      (let ((wavelength:double 100000.0))
        (let ((i:double 1.0) (n:double 20.0))
          (dotimes (i n)
            (let ((g:double 
              (+ 0.5 (* 0.5 (cos (* i (/ (i64tod (now)) wavelength)))))))
              (glColor3d (/ 1.0 i) g (- 1.0 (/ 1.0 i)))
              ;(glRotated (* 90.0 g) (- 1.0 g) g 1.0)
              (circle (* n (/ i n)) i))
    
              ))
        (let ((i 1))
          (dotimes (i 15)
            (aset! amp_array i 
              (* 0.6 (+ 0.5 (* 0.5 (cos (* (i64tof i) (/ (i64tof (now)) (dtof wavelength))))))))))
      ))
     )

;; a trivial opengl draw loop
(bind-func my-gl-loop
    (lambda ()
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (glLoadIdentity)
      (let ((wavelength:double 100000.0))
        (let ((i:i64 1) (n:double 20.0))
          (dotimes (i 20)
              (glColor3d (/ 1.0 (i64tod i)) (aref beat_array i) (- 1.0 (/ 1.0 (i64tod i))))
              ;(glRotated (* 90.0 g) (- 1.0 g) g 1.0)
              (circle (* (- n (i64tod i)) (/ 1.0 n)) (i64tod i)))
    
              ))
      ))
     )


(bind-func initgl
  (lambda ()
    (glMatrixMode GL_PROJECTION)
    (glLoadIdentity)
    (glOrtho -1. 1. -1. 1. 0.0 10.)
    (glMatrixMode GL_MODELVIEW)))

(initgl)

;; standard impromptu callback                                                
(define opengl-test
  (lambda ()
    (my-gl-loop)
    (gl:swap-buffers glctx)
    (callback (+ (now) 500) 'opengl-test)))

(opengl-test)



(define scale (pc:scale 0 'ionian))


(bind-func setBeat
  (lambda (beat:i64 val:double)
    (aset! beat_array beat val)))

(setBeat 7 1.0)

(define *metro* (make-metro 140))

(define SHMusic
  (lambda (beat mod)
    (if (= (modulo beat mod) 0)
      (play piano (pc:relative 60 (* 2 mod) scale) 130 1))

    (if (= (modulo beat mod) 0)
      (setBeat mod 1.0)
      (setBeat mod 0.0))



    (callback (*metro* (+ beat (* 0.5 1))) 'SHMusic (+ beat 1) mod)))


(SHMusic (*metro* 'get-beat 1) 1) 
(SHMusic (*metro* 'get-beat 1) 2) 
(SHMusic (*metro* 'get-beat 1) 3) 
(SHMusic (*metro* 'get-beat 1) 4) 
(SHMusic (*metro* 'get-beat 1) 5) 
(SHMusic (*metro* 'get-beat 1) 6) 
(SHMusic (*metro* 'get-beat 1) 7) 
(SHMusic (*metro* 'get-beat 1) 8) 

(bind-func rampGreenX
  (lambda (value:double)
    (set! green value)
    ;(let ((vtk 0.0) (seconds 0.3))
      ;(set-signal! green vtk seconds))
    ))

(rampGreen 0.7)
