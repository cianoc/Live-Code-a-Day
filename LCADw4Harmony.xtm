(define scale (pc:scale 7 'aeolian))

(define root 1)
(define pcr
  (lambda ()
    (pc:relative 36 root scale))) 

;;;;;;;;; harmony

(define key-change
  (lambda (beat)
    (cond ((= (modulo beat 32) 0) (set! scale (pc:scale 0 'ionian)))
          ((= (modulo beat 32) 16) (set! scale (pc:scale 7 'ionian)))))

    (callback (*metro* (+ beat (* .5 1))) 'key-change (+ beat 1))
    ))

(key-change (*metro* 'get-beat 1))
(chords (*metro* 'get-beat 1) 1)
(scale)

(define res-sweep
  (lambda (beat dur)
    (fmpad_fx.res (wave 0.2 0.9 5/2))
    (fmpad_fx.fb (wave 0.1 0.8 5))
    ; (fmpad_fx.wet (wave 0.1 0.5 1/2))
    (fmpad_fx.cwet (wave 0.1 0.8 4))
    (fmpad_fx.cfb (wave 0.3 0.9 2))
    (callback (*metro* (+ beat (* dur .5))) 'res-sweep
        (+ beat dur) dur)))

(res-sweep (*metro* 'get-beat 4.0) 5/4)

(fmpad_fx.res 0.1)
(fmpad_fx.fb 0.9)
(fmpad_fx.wet 0.9)
(fmpad_fx.cwet 0.8)
(fmpad_fx.cfb 0.8)



(define res-sweep
  (lambda (beat dur)
    (fmpad_fx.res (wave 0.2 0.9 5/2))
    (fmpad_fx.fb (wave 0.1 0.8 5))
    ; (fmpad_fx.wet (wave 0.1 0.5 1/2))
    (fmpad_fx.cwet (wave 0.1 0.8 4))
    (fmpad_fx.cfb (wave 0.3 0.9 2))
    (callback (*metro* (+ beat (* dur .5))) 'res-sweep
        (+ beat dur) dur)))

(res-sweep (*metro* 'get-beat 4.0) 5/4)

        (fmsynth_fx.cl (chorus_c 0.0))
        (fmsynth_fx.cr (chorus_c 0.314))
        (fmsynth_fx.del1 (delay_c (convert (/ SR 2.0))))
        (fmsynth_fx.del2 (delay_c (convert (/ SR 3.0))))
        (fmsynth_fx.vcfl (vcf_c 1))
        (fmsynth_fx.vcfr (vcf_c 1))
        (fmsynth_fx.res 0.7)        
        (fmsynth_fx.revl (reverb_c 20.0))
        (fmsynth_fx.revr (reverb_c 20.0))
        (fmsynth_fx.cwet 0.1)
        (fmsynth_fx.cfb 0.1)
        (fmsynth_fx.dwet 0.1)
        (fmsynth_fx.dfb 0.1)
        (fmsynth_fx.wet 0.1)
        (fmsynth_fx.fb 0.1)




(chords (*metro* 'get-beat 1) 1)

(define *degree* 0)

(define chords
  (lambda (beat dur)

    (if (= (modulo beat 8) 0)
      (set! root (random (cdr (assoc root '((1 5)
                                           (5 2)
                                           (2 7)
                                           (7 1)))))))

 ;   (if (= (modulo beat 8) 0) 
  ;    (for-each (lambda (p)
   ;         (play piano p 110 dur))
    ;      (pc:make-chord (pcr) (+ (pcr) 12) 'scale))
     ; )

    (callback (*metro* (+ beat (* .5 dur))) 'chords (+ beat dur) dur)
    ))

(chords (*metro* 'get-beat 1) 1)

(define progression
  (lambda (beat dur degree)
    (if (*metre1* beat 1.0)
      (for-each (lambda (p)
                (play strings p 120 dur)
                (pc:make-chord 48 89 3 (pc:diatonic 0 '- degree)))))

    (callback (*metro* (+ beat (* .5 dur))) 'progression (+ beat dur) dur
              (random (cdr (assoc degree '((i iv v iii6 vi)
                                           (ii v vii)
                                           (iii6 vi)
                                           (iv v ii vii i)
                                           (v i vi)
                                           (vii v i)
                                           (vi ii))))))))

(progression (*metro* 'get-beat 1) 1/2 'i)

(bind-val curr_note double 2.0)
(bind-func set_curr_note
  (lambda (note:double)
    (set! curr_note note)))

(bind-val counter double 0.0)
(bind-func inc_counter
  (lambda ()
    (set! counter (+ counter curr_note))))

(bind-func dec_counter
  (lambda ()
    (set! counter (- counter 20.0))))

(define melody
  (lambda (beat dur)
    (if (*metre1* beat 1.0)
      (set! dur (random '(2 1 1/3 ))))

    (let ( (note (pc:relative (pcr) (cosr 5 4 1/3) scale))
          (vel (random  '(70 50 ))))

      (play fmsynth note vel (* 1 dur) 0.8 (+ 10.0 root))
      ;(play piano note (+ 100.0 vel) (* 1 dur))

      )

    (callback (*metro* (+ beat (* .5 dur))) 'melody (+ beat dur) dur)
    ))

(melody (*metro* 'get-beat 1) 1/2)
(bassline (*metro* 'get-beat 1) 1/3)
(bassline (*metro* 'get-beat 1) 1/4)

(define bassline2
  (lambda (beat dur)
    (if (*metre1* beat 1.0)
      (play subbass 48  120 dur))

    ; (if (*metre1* beat (random '(2.0 4.0)))
    ;   (play subbass (- (pcr) 5)  110 dur))

    ;  (if (*metre1* beat 6.0)
    ;   (play subbass (pcr)  110 dur))

    ; (if (*metre1* beat (random '(4)))
    ;   (play subbass (pc:relative (- (pcr) 12) (random '(3 4 -2)) scale)  110 (* 2 dur)))
   (callback (*metro* (+ beat (* .5 dur))) 'bassline2 (+ beat dur) 1/4)
    ))

(bassline2 (*metro* 'get-beat 1) 1)

(define guitar1
  (lambda (beat dur)
    (if (*metre1* beat 1.0)
      (play strings (- (pcr) 12)  130 (* 2 dur)))

    (if (*metre1* beat 2.0)
      (play strings (- (pcr) 5)  110 (* 2 dur)))

     (if (*metre1* beat 3.0)
      (play strings (pcr)  110 (* 2 dur)))

  
    (callback (*metro* (+ beat (* .5 dur))) 'guitar1 (+ beat dur) dur)
    ))

(guitar1 (*metro* 'get-beat 1) 1/2)






(define melody1
  (lambda (beat dur octave)
    (if (= (modulo beat 1) 0)
      (set! dur (random '( 2  4))))
    (strings-djembe beat (pc:relative (+ (pcr) (* octave 24) (random '(0.0 1.0))) 
                  (* (random '(1 -1 2)) ( modulo  (/ (modulo beat 8) dur) 5)) scale) 
                  (random '(140 100)) dur)
    (callback (*metro* (+ beat (* .6 dur))) 'melody 1 (+ beat dur) dur octave )
    ))

(melody1 (*metro* 'get-beat 1) 1 1)


(define bassline
  (lambda (beat dur)
    (if (or (= (modulo beat 4) 0) (= (modulo beat 4) 3) (= (modulo beat 8) 7)
      (set! dur (random '(1/4 1/2 1/3 1))))
    (play subbass (pc:relative (+ (pcr) -12) 
                  (* (random '(-1 1 2)) ( modulo  (/ (modulo beat 8) dur) 3)) scale) 
                  (random '(100 120)) dur)))
    ;(callback (*metro* (+ beat (* .6 dur))) 'bassline (+ beat dur) dur)
    ))

(bassline (*metro* 'get-beat 1) 1)