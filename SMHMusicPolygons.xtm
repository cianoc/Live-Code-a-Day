;;; Code:
(define glctx (gl:make-ctx ":0.0" #f 0.0 0.0 640.0 480.0))

(bind-func initgl
  (lambda ()
    (glMatrixMode GL_PROJECTION)
    (glLoadIdentity)
    (glOrtho -4. 4. -3. 3. 0.0 10.)
    (glMatrixMode GL_MODELVIEW)))

(initgl)

;beat array
(bind-val beat_array |14,double|*)

(bind-func setBeat
  (lambda (beat:i64 val:double)
    (aset! beat_array beat val)))

(bind-func getBeat
  (lambda (beat:i64)
    (aref beat_array beat)))

(define fade-out
	(lambda ()
		(let ((i:i64 1))
			(dotimes (i 15)
					(if (> (getBeat i) 0.0) 
						(setBeat i (* (getBeat i) 0.9))))
		)
		(callback (+ (now) 500) 'fade-out)))

(fade-out)


;;animation functions
(bind-func wave
	(lambda (wavelength:double amplitude:double)
		(* amplitude (cos (/ (i64tod (now)) wavelength)))))

;; my circle function
(bind-func circle
	(lambda (radius res)
		(glBegin GL_TRIANGLE_FAN)
		(let ((i:double 0.0))
			(dotimes (i res)
				(let ((radians (* (/ i res) 6.283)))
					(glVertex2d (* (sin radians) radius) 
            (* (cos radians) radius))))
		(glEnd))))


(bind-func mandala
	(lambda ()
		(let ((i:i64 1) (n:double 14.0))
          (dotimes (i 15)
          	(let ((val:double (aref beat_array i)))
              (glColor3d val (* val val)  (/ 1.0 (i64tod i)))
              (glTranslated 0.0 (wave 4000.0 0.01) 0.0)
              (glPushMatrix)
              ;(glTranslated 0.0 (wave 4000.0 0.5) 0.0)
              ;(glRotated (wave 4000.0 5.1) 0.0 0.0 1.0)
              (glRotated (* (i64tod i) (* 0.001 (i64tod (now)))) 0.0 0.0 1.0)
              
              (circle (- 1.0 (/ (i64tod i) n)) (- n (i64tod i)))
              (glPopMatrix)
             )
          )
       )))


(bind-func my-gl-loop
    (lambda ()
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (glLoadIdentity)
      (mandala)
      (let ((i:double 1.0))
      	(dotimes (i 6.0)
		      (glPushMatrix)
		      (glRotated (+ (* 0.001 (i64tod (now))) (* i 60.0)) 0.0 0.0 1.0)
		      (glTranslated 0.0 2.0 0.0)
		      (mandala)
		      (glPopMatrix)
		      ))

      )))



(wave 4000.0 0.5)






;; standard impromptu callback                                                
(define opengl-test
  (lambda ()
    (my-gl-loop)
    (gl:swap-buffers glctx)
    (callback (+ (now) 500) 'opengl-test)))

(opengl-test)


;music

(define scale (pc:scale 0 'pentatonic))

(define *metro* (make-metro 140))

(define SHMusic
  (lambda (beat mod)
    (if (= (modulo beat mod) 0)
    	(play djembe (+ 10 mod) 150 1))

     (if (= (modulo beat mod) 0)
    	(play conga (+ 10 mod) 150 1)
    	)

      (if (= (modulo beat mod) 8)
    	(play piano 48 120 1)
    	)

    (if (= (modulo beat mod) 0)
      (setBeat mod 1.0)
      (setBeat mod 0.0)
      )



    (callback (*metro* (+ beat (* 0.5 1))) 'SHMusic (+ beat 1) mod)))


(SHMusic (*metro* 'get-beat 1) 1) 
(SHMusic (*metro* 'get-beat 1) 2) 
(SHMusic (*metro* 'get-beat 1) 3) 
(SHMusic (*metro* 'get-beat 1) 4) 
(SHMusic (*metro* 'get-beat 1) 5) 
(SHMusic (*metro* 'get-beat 1) 6) 
(SHMusic (*metro* 'get-beat 1) 7) 
(SHMusic (*metro* 'get-beat 1) 8) 
(SHMusic (*metro* 'get-beat 1) 9) 
(SHMusic (*metro* 'get-beat 1) 10) 
(SHMusic (*metro* 'get-beat 1) 11) 
(SHMusic (*metro* 'get-beat 1) 12) 
(SHMusic (*metro* 'get-beat 1) 13) 
(SHMusic (*metro* 'get-beat 1) 14) 


(bind-func rampArray
  (lambda (index:i64 value:double)
    (setBeat index value)
    (let ((vtk 0.0) (seconds 0.3))
      (set-signal! (aref beat_array) vtk seconds))
    ))
