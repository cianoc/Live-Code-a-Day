(define scale (pc:scale 8 'phrygian))

(define wave
  (lambda (min max wavelength)
    (let ((freq (/ 1 wavelength)) (range (- max min)))
      (let ((sinNorm (+ 0.5 (* 0.5 (sin (* (now) freq))))))
        (+ min (* sinNorm range)) 
    ))))

(define root 3)
(define pcr
  (lambda ()
    (pc:relative 48 root scale))) 

;;;;;;;;; harmony

(define key-change
  (lambda (beat)
    (cond ((= (modulo beat 64) 0) (set! scale (pc:scale 8 'aeolian)))
          ((= (modulo beat 64) 16) (set! scale (pc:scale 11 'ionian)))
          ((= (modulo beat 64) 32) (set! scale (pc:scale 8 'aeolian)))
          ((= (modulo beat 64) 48) (set! scale (pc:scale 11 'ionian))))

    (callback (*metro* (+ beat (* .5 1))) 'key-change (+ beat 1))
    ))

(key-change (*metro* 'get-beat 1))
(chords (*metro* 'get-beat 1) 1)
(scale)

(define chords
  (lambda (beat dur)

    (if (= (modulo beat 4) 0)
      (set! root (random (cdr (assoc root '((3 5) (5 1) (1 4) (4 3) ) )))))

    ; (if (= (modulo beat 2) 0)
    ;   (play shimmer (+ (pcr) 0) (wave 20 40 1) 1))

    (if (= (modulo beat 1) 0)
      
 
      (for-each (lambda (p)
                (play piano p (wave 90 130 (* 3 dur)) dur))
                (pc:make-chord (pcr) (+ (pcr) 24) (random '(3 2)) scale))

    (callback (*metro* (+ beat (* .5 dur))) 'chords (+ beat dur) dur)
    ; (cb beat dur 'chords)
    ))


(chords (*metro* 'get-beat 1) 4)

(define bassline
  (lambda (beat dur)
    (if (< (modulo beat 4) 3)
      (play sawbass ( - (pcr) 12) 100 1/4))
    (callback (*metro* (+ beat (* .5 dur))) 'bassline (+ beat dur) dur)
    ))

(bassline (*metro* 'get-beat 1) 1/2)

(define bassline
  (lambda (beat dur)
    (if (= (modulo beat 4) 0)
      (play sawbass ( + (pcr) 12) 100 2))
    ;(callback (*metro* (+ beat (* .5 dur))) 'bassline (+ beat dur) dur)
    ))

(bassline (*metro* 'get-beat 1) 1)

(define melody
  (lambda (beat dur octave)
    (if (= (modulo beat 1) 0)
      (set! dur (random '(3/2 1/2))))
    (play piano (pc:relative (+ (pcr) (* octave 12)) 
                  (* (random '(-1 1 2)) ( modulo  (/ (modulo beat 8) dur) 8)) scale) 
                  (random '(50 0)) dur)
    (callback (*metro* (+ beat (* .6 dur))) 'melody (+ beat dur) dur octave )
    ))

(melody (*metro* 'get-beat 1) 1 3)


(define bassline
  (lambda (beat dur)
    (if (= (modulo beat 1) 0)
      (set! dur (random '(2 3))))
    (play subbass (pc:relative (+ (pcr) 0) 
                  (* (random '(-1 1 2)) ( modulo  (/ (modulo beat 8) dur) 8)) scale) 
                  (random '(90 110)) dur)
    ;(callback (*metro* (+ beat (* .6 dur))) 'bassline (+ beat dur) dur)
    ))

(bassline (*metro* 'get-beat 1) 1)