;;;;; drums
;; define me first!
(define *metro* (make-metro 130))

(define *subdiv* 1/8)
(define *metre1* (make-metre '( 12 2 1 1) *subdiv* ))
(define *metre1* (make-metre '( 12 6 3 2 1) 1 ))
(define *metre3* (make-metre '( 8 2) *subdiv*))
(define *metre4* (make-metre '( 3 3 2) *subdiv*))

(define edrums-fmsynth
 (lambda (beat note vel dur)
  (play edrums note vel dur)
  (play djembe note vel dur)))

(define piano-conga
 (lambda (beat note vel dur)
  
  (play fmsynth (pcr) vel dur)
  (play conga (+ (modulo note 15) 10) vel dur)))

(define strings-djembe
 (lambda (beat note vel dur)
  (play strings note vel dur)
  (play strings (+ note 7) vel dur)
  (play piano note vel dur)
  (play piano (- note 24) vel dur)))

(edrums-fmsynth 46 140 1/4)

(define *degree* 0.0)
(let ((vtk 0.0) (seconds 15))
  (set-signal! *degree* vtk seconds))

(set-signal! *kickVel* 0 15)

(define rampDegree
  (lambda (degree)
    (set! *degree* degree)
    (let ((vtk (- degree 10)) (seconds 0.3))
    (set-signal! *degree* vtk seconds))))


(bind-val degree double 0.0)

(bind-func ramp_degree
  (lambda (val:double)
    (set! degree 1.0)
    (let ((vtk (- val 10)) (seconds 0.3))
    (set-signal! degree vtk seconds))))


(ramp_degree 43.0)

(root)

(define kit
  (lambda (beat dur)
      
      (cond ((*metre1* beat 1.0) (play  edrums 10 150 (* 3.0 dur)))
            ((*metre1* beat 2.0) (play  edrums 21 130 dur))
            ((*metre1* beat 4.0) (play  edrums 10 150 dur))
            ((*metre1* beat 5.0) (play  edrums 42 150 dur))
            ((*metre1* beat 7.0) (play  edrums 10 130 dur))
            ((*metre1* beat 9.0) (play  edrums 11 130 (* 3.0 dur)))
            ((*metre1* beat 12.0) (play 1/3  edrums 41 130 dur))
           ((*metre1* beat 13.0) (play  edrums 46 150 dur)))


    

     ;  (cond ((*metre1* beat 1.0) (set_curr_note -14))
      ;       ((*metre2* beat 1.0) (set_curr_note 11))
       ;      ((*metre3* beat 3.0) (set_curr_note 24))
        ;     ((*metre3* beat 4.0) (set_curr_note 96)))

    ;  (if (< (random) 0.5) 
     ;  (piano-conga beat (random 25) (cosr 160 30 1/2) dur)
      ;  (strings-djembe beat (pc:relative (pcr) (random 2 11) scale) (cosr 170 10 1/3) dur)
       ; )


   (if ( = (modulo (*metre1* beat) 3) 0)
      (play perc 15 110 dur)
      (play drums (random 10 19) (cosr 110 20 (random '(5/2 1/4))) dur))

    
      

     
    (if ( > (modulo (*metre1* beat) 6) 2)
      (play conga (trir 12 3 1/3) (random '(130 0)) dur ))
    
    (if ( > (modulo (*metre1* beat) 6) 0)
      (play djembe (cosr 3 (random 3 4) 1/3) (random '(110 120 0)) dur ))
    

   (callback (*metro* (+ beat (* 0.5 dur))) 'k it (+ beat dur) dur)
))


(kit (*metro* 'get-beat 1) 1/4) 

(define violin
  (lambda (beat dur)

    (play fmsynth 67 20 dur 0.5 10.0)
    (play fmsynth 51 20 dur 0.9 18.0)
    (play fmsynth 48 20 dur 0.7 15.0)

    (play strings 60 120 dur)
    (play strings 72 120 dur)
    (play strings 48 120 dur)
    

   (callback (*metro* (+ beat (* 0.5 dur))) 'v iolin (+ beat dur) 8)
))


(violin (*metro* 'get-beat 1) 8 )




(define metre-change
  (lambda (beat)
    (if (= (modulo beat 20) 0)
      (set! *subdiv* (random '(1/2 1/6))))

     (if (= (modulo beat 20) 5)
      (set! *subdiv* (random '(1/5 1/3))))

      (if (= (modulo beat 20) 15)
      (set! *subdiv* 1/4))

     (if (= (modulo beat 20) 17)
      (set! *subdiv* (random '(1/8 1))))


    (if (= (modulo beat 40) 0)
      (set! *metre1* (make-metre '(2 1 2 2 1 2 1 1 2 2 1 1 2) *subdiv*))
      (set! *metre2* (make-metre '( 1 1 1 2  ) *subdiv*))
      (set! *metre3* (make-metre '( 6 6 4 4 ) *subdiv*)))
 
    (if (= (modulo beat 40) 20)
      (set! *metre3* (make-metre '(2 1 2 2 1 2 1 1 2 2 1 1 2) *subdiv*))
      (set! *metre2* (make-metre '( 1 1 1 2  ) *subdiv*))
      (set! *metre1* (make-metre '( 6 6 4 4 ) *subdiv*)))
      ; (println *subdiv*)
   (callback (*metro* (+ beat 0.5)) 'metre-change (+ beat 1))))

(metre-change (*metro* 'get-beat 1) 1)

